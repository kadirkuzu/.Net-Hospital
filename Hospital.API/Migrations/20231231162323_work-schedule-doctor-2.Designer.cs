// <auto-generated />
using System;
using Hospital.API.Repositories.Concrete;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Hospital.API.Migrations
{
    [DbContext(typeof(HospitalDbContext))]
    [Migration("20231231162323_work-schedule-doctor-2")]
    partial class workscheduledoctor2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DoctorWorkSchedule", b =>
                {
                    b.Property<Guid>("DoctorsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WorkSchedulesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DoctorsId", "WorkSchedulesId");

                    b.HasIndex("WorkSchedulesId");

                    b.ToTable("DoctorWorkSchedule");
                });

            modelBuilder.Entity("Hospital.Models.Admin", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Hospital.Models.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AppointmentDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("Hospital.Models.Clinic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Clinics");

                    b.HasData(
                        new
                        {
                            Id = new Guid("eb6b54e5-48be-48b4-8907-490ab13648c8"),
                            CreatedDate = new DateTime(2023, 12, 31, 16, 23, 22, 704, DateTimeKind.Utc).AddTicks(8529),
                            DepartmentId = new Guid("b385ba05-80a5-4506-ae84-267ceac1d2c5"),
                            Name = "Kardiyoloji",
                            UpdatedDate = new DateTime(2023, 12, 31, 16, 23, 22, 704, DateTimeKind.Utc).AddTicks(8529)
                        },
                        new
                        {
                            Id = new Guid("6b936aed-3d63-4b02-ace8-b7ab4b7edb98"),
                            CreatedDate = new DateTime(2023, 12, 31, 16, 23, 22, 704, DateTimeKind.Utc).AddTicks(8914),
                            DepartmentId = new Guid("b385ba05-80a5-4506-ae84-267ceac1d2c5"),
                            Name = "Nöroloji",
                            UpdatedDate = new DateTime(2023, 12, 31, 16, 23, 22, 704, DateTimeKind.Utc).AddTicks(8914)
                        },
                        new
                        {
                            Id = new Guid("5a97f4f6-49f5-4571-b6ed-d31ae749f879"),
                            CreatedDate = new DateTime(2023, 12, 31, 16, 23, 22, 704, DateTimeKind.Utc).AddTicks(8916),
                            DepartmentId = new Guid("5c0f696d-f2df-4cb5-9c00-af62e6f150d9"),
                            Name = "Genel Cerrahi",
                            UpdatedDate = new DateTime(2023, 12, 31, 16, 23, 22, 704, DateTimeKind.Utc).AddTicks(8916)
                        },
                        new
                        {
                            Id = new Guid("178f1526-a8dc-4664-96ae-78201d26ca73"),
                            CreatedDate = new DateTime(2023, 12, 31, 16, 23, 22, 704, DateTimeKind.Utc).AddTicks(8918),
                            DepartmentId = new Guid("5c0f696d-f2df-4cb5-9c00-af62e6f150d9"),
                            Name = "Ortopedi",
                            UpdatedDate = new DateTime(2023, 12, 31, 16, 23, 22, 704, DateTimeKind.Utc).AddTicks(8919)
                        },
                        new
                        {
                            Id = new Guid("038860b2-9030-42b8-aabe-0015dfd787d4"),
                            CreatedDate = new DateTime(2023, 12, 31, 16, 23, 22, 704, DateTimeKind.Utc).AddTicks(8921),
                            DepartmentId = new Guid("66e37f12-b526-4ac5-ae2f-43575a1c7780"),
                            Name = "Göz Hastalıkları",
                            UpdatedDate = new DateTime(2023, 12, 31, 16, 23, 22, 704, DateTimeKind.Utc).AddTicks(8921)
                        },
                        new
                        {
                            Id = new Guid("389af84b-47a3-47f3-b13d-0551ddad1261"),
                            CreatedDate = new DateTime(2023, 12, 31, 16, 23, 22, 704, DateTimeKind.Utc).AddTicks(8924),
                            DepartmentId = new Guid("676db547-3439-40e1-b3d9-c11d554c585d"),
                            Name = "Kulak Burun Boğaz",
                            UpdatedDate = new DateTime(2023, 12, 31, 16, 23, 22, 704, DateTimeKind.Utc).AddTicks(8924)
                        },
                        new
                        {
                            Id = new Guid("ae1609ef-a81f-4a38-b960-2557edfe5d89"),
                            CreatedDate = new DateTime(2023, 12, 31, 16, 23, 22, 704, DateTimeKind.Utc).AddTicks(8929),
                            DepartmentId = new Guid("ac6aa076-16df-4a32-9f63-dc45333c3fba"),
                            Name = "Dermatoloji",
                            UpdatedDate = new DateTime(2023, 12, 31, 16, 23, 22, 704, DateTimeKind.Utc).AddTicks(8929)
                        },
                        new
                        {
                            Id = new Guid("7073d4e7-08f3-40f3-88a2-b9b8526bd868"),
                            CreatedDate = new DateTime(2023, 12, 31, 16, 23, 22, 704, DateTimeKind.Utc).AddTicks(8931),
                            DepartmentId = new Guid("9e5b98f5-392f-4f7c-ba6c-ea729936c7af"),
                            Name = "Radyoloji",
                            UpdatedDate = new DateTime(2023, 12, 31, 16, 23, 22, 704, DateTimeKind.Utc).AddTicks(8932)
                        },
                        new
                        {
                            Id = new Guid("860534f3-f075-4135-ab73-e4770d7bd781"),
                            CreatedDate = new DateTime(2023, 12, 31, 16, 23, 22, 704, DateTimeKind.Utc).AddTicks(8933),
                            DepartmentId = new Guid("e0c96494-819f-451e-b684-dff2aed17b02"),
                            Name = "Nükleer Tıp",
                            UpdatedDate = new DateTime(2023, 12, 31, 16, 23, 22, 704, DateTimeKind.Utc).AddTicks(8934)
                        },
                        new
                        {
                            Id = new Guid("95930205-0c05-48df-9af8-9c6ccaa72fba"),
                            CreatedDate = new DateTime(2023, 12, 31, 16, 23, 22, 704, DateTimeKind.Utc).AddTicks(8936),
                            DepartmentId = new Guid("3f677574-0f3a-468f-b1df-00b1a29f8282"),
                            Name = "Üroloji",
                            UpdatedDate = new DateTime(2023, 12, 31, 16, 23, 22, 704, DateTimeKind.Utc).AddTicks(8936)
                        },
                        new
                        {
                            Id = new Guid("83698d36-f530-48a8-be2a-aaabb9cf0b10"),
                            CreatedDate = new DateTime(2023, 12, 31, 16, 23, 22, 704, DateTimeKind.Utc).AddTicks(8938),
                            DepartmentId = new Guid("699d5895-2a50-4b52-ad05-6397ed824df6"),
                            Name = "Psikiyatri",
                            UpdatedDate = new DateTime(2023, 12, 31, 16, 23, 22, 704, DateTimeKind.Utc).AddTicks(8938)
                        },
                        new
                        {
                            Id = new Guid("a76eafb3-b854-4f5c-9932-94b2d474d44a"),
                            CreatedDate = new DateTime(2023, 12, 31, 16, 23, 22, 704, DateTimeKind.Utc).AddTicks(8940),
                            DepartmentId = new Guid("a90ad436-5091-43aa-b287-cf6bd03e47df"),
                            Name = "Çocuk Kardiyolojisi",
                            UpdatedDate = new DateTime(2023, 12, 31, 16, 23, 22, 704, DateTimeKind.Utc).AddTicks(8940)
                        });
                });

            modelBuilder.Entity("Hospital.Models.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b385ba05-80a5-4506-ae84-267ceac1d2c5"),
                            CreatedDate = new DateTime(2023, 12, 31, 19, 23, 22, 703, DateTimeKind.Local).AddTicks(5267),
                            Name = "Dahiliye",
                            UpdatedDate = new DateTime(2023, 12, 31, 19, 23, 22, 704, DateTimeKind.Local).AddTicks(7440)
                        },
                        new
                        {
                            Id = new Guid("5c0f696d-f2df-4cb5-9c00-af62e6f150d9"),
                            CreatedDate = new DateTime(2023, 12, 31, 19, 23, 22, 704, DateTimeKind.Local).AddTicks(7949),
                            Name = "Cerrahi",
                            UpdatedDate = new DateTime(2023, 12, 31, 19, 23, 22, 704, DateTimeKind.Local).AddTicks(7950)
                        },
                        new
                        {
                            Id = new Guid("66e37f12-b526-4ac5-ae2f-43575a1c7780"),
                            CreatedDate = new DateTime(2023, 12, 31, 19, 23, 22, 704, DateTimeKind.Local).AddTicks(7953),
                            Name = "Göz Hastalıkları",
                            UpdatedDate = new DateTime(2023, 12, 31, 19, 23, 22, 704, DateTimeKind.Local).AddTicks(7954)
                        },
                        new
                        {
                            Id = new Guid("676db547-3439-40e1-b3d9-c11d554c585d"),
                            CreatedDate = new DateTime(2023, 12, 31, 19, 23, 22, 704, DateTimeKind.Local).AddTicks(7956),
                            Name = "Kulak Burun Boğaz",
                            UpdatedDate = new DateTime(2023, 12, 31, 19, 23, 22, 704, DateTimeKind.Local).AddTicks(7956)
                        },
                        new
                        {
                            Id = new Guid("ac6aa076-16df-4a32-9f63-dc45333c3fba"),
                            CreatedDate = new DateTime(2023, 12, 31, 19, 23, 22, 704, DateTimeKind.Local).AddTicks(7958),
                            Name = "Dermatoloji",
                            UpdatedDate = new DateTime(2023, 12, 31, 19, 23, 22, 704, DateTimeKind.Local).AddTicks(7958)
                        },
                        new
                        {
                            Id = new Guid("9e5b98f5-392f-4f7c-ba6c-ea729936c7af"),
                            CreatedDate = new DateTime(2023, 12, 31, 19, 23, 22, 704, DateTimeKind.Local).AddTicks(7963),
                            Name = "Radyoloji",
                            UpdatedDate = new DateTime(2023, 12, 31, 19, 23, 22, 704, DateTimeKind.Local).AddTicks(7964)
                        },
                        new
                        {
                            Id = new Guid("e0c96494-819f-451e-b684-dff2aed17b02"),
                            CreatedDate = new DateTime(2023, 12, 31, 19, 23, 22, 704, DateTimeKind.Local).AddTicks(7966),
                            Name = "Nükleer Tıp",
                            UpdatedDate = new DateTime(2023, 12, 31, 19, 23, 22, 704, DateTimeKind.Local).AddTicks(7967)
                        },
                        new
                        {
                            Id = new Guid("3f677574-0f3a-468f-b1df-00b1a29f8282"),
                            CreatedDate = new DateTime(2023, 12, 31, 19, 23, 22, 704, DateTimeKind.Local).AddTicks(7969),
                            Name = "Üroloji",
                            UpdatedDate = new DateTime(2023, 12, 31, 19, 23, 22, 704, DateTimeKind.Local).AddTicks(7969)
                        },
                        new
                        {
                            Id = new Guid("699d5895-2a50-4b52-ad05-6397ed824df6"),
                            CreatedDate = new DateTime(2023, 12, 31, 19, 23, 22, 704, DateTimeKind.Local).AddTicks(7978),
                            Name = "Psikiyatri",
                            UpdatedDate = new DateTime(2023, 12, 31, 19, 23, 22, 704, DateTimeKind.Local).AddTicks(7978)
                        },
                        new
                        {
                            Id = new Guid("a90ad436-5091-43aa-b287-cf6bd03e47df"),
                            CreatedDate = new DateTime(2023, 12, 31, 19, 23, 22, 704, DateTimeKind.Local).AddTicks(7981),
                            Name = "Çocuk Sağlığı ve Hastalıkları",
                            UpdatedDate = new DateTime(2023, 12, 31, 19, 23, 22, 704, DateTimeKind.Local).AddTicks(7982)
                        });
                });

            modelBuilder.Entity("Hospital.Models.Doctor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClinicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("Hospital.Models.Patient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("Hospital.Models.WorkSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("WorkSchedules");

                    b.HasData(
                        new
                        {
                            Id = new Guid("28a8033a-01bf-46ec-90f9-69005a6cbd76"),
                            CreatedDate = new DateTime(2023, 12, 31, 16, 23, 22, 704, DateTimeKind.Utc).AddTicks(9896),
                            Day = 1,
                            EndTime = new TimeSpan(0, 16, 0, 0, 0),
                            StartTime = new TimeSpan(0, 8, 0, 0, 0),
                            UpdatedDate = new DateTime(2023, 12, 31, 16, 23, 22, 704, DateTimeKind.Utc).AddTicks(9896)
                        },
                        new
                        {
                            Id = new Guid("3a82bcfd-4b6a-4361-8736-eced0dea0ea4"),
                            CreatedDate = new DateTime(2023, 12, 31, 16, 23, 22, 705, DateTimeKind.Utc).AddTicks(658),
                            Day = 1,
                            EndTime = new TimeSpan(0, 18, 0, 0, 0),
                            StartTime = new TimeSpan(0, 9, 0, 0, 0),
                            UpdatedDate = new DateTime(2023, 12, 31, 16, 23, 22, 705, DateTimeKind.Utc).AddTicks(659)
                        },
                        new
                        {
                            Id = new Guid("d9ac0b92-2653-4424-ab51-ebfc93ed53c0"),
                            CreatedDate = new DateTime(2023, 12, 31, 16, 23, 22, 705, DateTimeKind.Utc).AddTicks(665),
                            Day = 1,
                            EndTime = new TimeSpan(0, 19, 0, 0, 0),
                            StartTime = new TimeSpan(0, 10, 0, 0, 0),
                            UpdatedDate = new DateTime(2023, 12, 31, 16, 23, 22, 705, DateTimeKind.Utc).AddTicks(665)
                        },
                        new
                        {
                            Id = new Guid("38160085-0064-4bd8-ac0f-f537e994c321"),
                            CreatedDate = new DateTime(2023, 12, 31, 16, 23, 22, 705, DateTimeKind.Utc).AddTicks(667),
                            Day = 2,
                            EndTime = new TimeSpan(0, 16, 30, 0, 0),
                            StartTime = new TimeSpan(0, 8, 30, 0, 0),
                            UpdatedDate = new DateTime(2023, 12, 31, 16, 23, 22, 705, DateTimeKind.Utc).AddTicks(667)
                        },
                        new
                        {
                            Id = new Guid("d079adc8-cbfa-4ec5-8bd7-1fa525a500cf"),
                            CreatedDate = new DateTime(2023, 12, 31, 16, 23, 22, 705, DateTimeKind.Utc).AddTicks(669),
                            Day = 2,
                            EndTime = new TimeSpan(0, 17, 30, 0, 0),
                            StartTime = new TimeSpan(0, 9, 30, 0, 0),
                            UpdatedDate = new DateTime(2023, 12, 31, 16, 23, 22, 705, DateTimeKind.Utc).AddTicks(669)
                        },
                        new
                        {
                            Id = new Guid("e86dd92d-6533-4648-96ef-ee3853088a77"),
                            CreatedDate = new DateTime(2023, 12, 31, 16, 23, 22, 705, DateTimeKind.Utc).AddTicks(733),
                            Day = 2,
                            EndTime = new TimeSpan(0, 18, 30, 0, 0),
                            StartTime = new TimeSpan(0, 10, 30, 0, 0),
                            UpdatedDate = new DateTime(2023, 12, 31, 16, 23, 22, 705, DateTimeKind.Utc).AddTicks(733)
                        },
                        new
                        {
                            Id = new Guid("898bd61c-a0c9-4d3e-a766-91fd9334883e"),
                            CreatedDate = new DateTime(2023, 12, 31, 16, 23, 22, 705, DateTimeKind.Utc).AddTicks(735),
                            Day = 3,
                            EndTime = new TimeSpan(0, 16, 0, 0, 0),
                            StartTime = new TimeSpan(0, 8, 0, 0, 0),
                            UpdatedDate = new DateTime(2023, 12, 31, 16, 23, 22, 705, DateTimeKind.Utc).AddTicks(735)
                        },
                        new
                        {
                            Id = new Guid("580c0024-b1ac-4be7-a253-bcf62f1d2e4e"),
                            CreatedDate = new DateTime(2023, 12, 31, 16, 23, 22, 705, DateTimeKind.Utc).AddTicks(737),
                            Day = 3,
                            EndTime = new TimeSpan(0, 18, 0, 0, 0),
                            StartTime = new TimeSpan(0, 9, 0, 0, 0),
                            UpdatedDate = new DateTime(2023, 12, 31, 16, 23, 22, 705, DateTimeKind.Utc).AddTicks(737)
                        },
                        new
                        {
                            Id = new Guid("0c58466a-8559-4249-a83c-a3064d03f8ab"),
                            CreatedDate = new DateTime(2023, 12, 31, 16, 23, 22, 705, DateTimeKind.Utc).AddTicks(738),
                            Day = 3,
                            EndTime = new TimeSpan(0, 19, 0, 0, 0),
                            StartTime = new TimeSpan(0, 10, 0, 0, 0),
                            UpdatedDate = new DateTime(2023, 12, 31, 16, 23, 22, 705, DateTimeKind.Utc).AddTicks(738)
                        },
                        new
                        {
                            Id = new Guid("94126296-7f82-47aa-bb30-9acd9f034764"),
                            CreatedDate = new DateTime(2023, 12, 31, 16, 23, 22, 705, DateTimeKind.Utc).AddTicks(741),
                            Day = 4,
                            EndTime = new TimeSpan(0, 16, 30, 0, 0),
                            StartTime = new TimeSpan(0, 8, 30, 0, 0),
                            UpdatedDate = new DateTime(2023, 12, 31, 16, 23, 22, 705, DateTimeKind.Utc).AddTicks(741)
                        },
                        new
                        {
                            Id = new Guid("8e2d6ca3-9df7-45f1-b105-42165081a668"),
                            CreatedDate = new DateTime(2023, 12, 31, 16, 23, 22, 705, DateTimeKind.Utc).AddTicks(744),
                            Day = 4,
                            EndTime = new TimeSpan(0, 17, 30, 0, 0),
                            StartTime = new TimeSpan(0, 9, 30, 0, 0),
                            UpdatedDate = new DateTime(2023, 12, 31, 16, 23, 22, 705, DateTimeKind.Utc).AddTicks(745)
                        },
                        new
                        {
                            Id = new Guid("dec376af-cbce-43f7-893c-eea954ecfc36"),
                            CreatedDate = new DateTime(2023, 12, 31, 16, 23, 22, 705, DateTimeKind.Utc).AddTicks(746),
                            Day = 4,
                            EndTime = new TimeSpan(0, 18, 30, 0, 0),
                            StartTime = new TimeSpan(0, 10, 30, 0, 0),
                            UpdatedDate = new DateTime(2023, 12, 31, 16, 23, 22, 705, DateTimeKind.Utc).AddTicks(746)
                        },
                        new
                        {
                            Id = new Guid("c0f50486-c9a3-41dd-968c-fdbccc643493"),
                            CreatedDate = new DateTime(2023, 12, 31, 16, 23, 22, 705, DateTimeKind.Utc).AddTicks(748),
                            Day = 5,
                            EndTime = new TimeSpan(0, 16, 0, 0, 0),
                            StartTime = new TimeSpan(0, 8, 0, 0, 0),
                            UpdatedDate = new DateTime(2023, 12, 31, 16, 23, 22, 705, DateTimeKind.Utc).AddTicks(748)
                        },
                        new
                        {
                            Id = new Guid("73b146ed-f452-4dc9-809c-b0c99349b8f3"),
                            CreatedDate = new DateTime(2023, 12, 31, 16, 23, 22, 705, DateTimeKind.Utc).AddTicks(749),
                            Day = 5,
                            EndTime = new TimeSpan(0, 17, 0, 0, 0),
                            StartTime = new TimeSpan(0, 9, 0, 0, 0),
                            UpdatedDate = new DateTime(2023, 12, 31, 16, 23, 22, 705, DateTimeKind.Utc).AddTicks(749)
                        },
                        new
                        {
                            Id = new Guid("55ccbd89-e20e-422f-b614-ba3ff67b2394"),
                            CreatedDate = new DateTime(2023, 12, 31, 16, 23, 22, 705, DateTimeKind.Utc).AddTicks(751),
                            Day = 5,
                            EndTime = new TimeSpan(0, 18, 0, 0, 0),
                            StartTime = new TimeSpan(0, 10, 0, 0, 0),
                            UpdatedDate = new DateTime(2023, 12, 31, 16, 23, 22, 705, DateTimeKind.Utc).AddTicks(751)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DoctorWorkSchedule", b =>
                {
                    b.HasOne("Hospital.Models.Doctor", null)
                        .WithMany()
                        .HasForeignKey("DoctorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hospital.Models.WorkSchedule", null)
                        .WithMany()
                        .HasForeignKey("WorkSchedulesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hospital.Models.Appointment", b =>
                {
                    b.HasOne("Hospital.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hospital.Models.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Hospital.Models.Clinic", b =>
                {
                    b.HasOne("Hospital.Models.Department", "Department")
                        .WithMany("Clinics")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Hospital.Models.Doctor", b =>
                {
                    b.HasOne("Hospital.Models.Clinic", "Clinic")
                        .WithMany("Doctors")
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clinic");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Hospital.Models.Admin", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Hospital.Models.Admin", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hospital.Models.Admin", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Hospital.Models.Admin", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hospital.Models.Clinic", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("Hospital.Models.Department", b =>
                {
                    b.Navigation("Clinics");
                });

            modelBuilder.Entity("Hospital.Models.Patient", b =>
                {
                    b.Navigation("Appointments");
                });
#pragma warning restore 612, 618
        }
    }
}
